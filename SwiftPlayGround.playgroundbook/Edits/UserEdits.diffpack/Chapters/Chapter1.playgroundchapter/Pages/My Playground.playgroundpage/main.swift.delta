<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diff</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string> - See https://www.swift.org/documentation/ for a full guide
 - https://kpbp.github.io/swiftcheatsheet/
 
</string>
			<key>ModifiedRange</key>
			<string>{57, 106}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{57, 0}</string>
		</dict>
		<dict>
			<key>ModifiedContent</key>
			<string> - - - - - -
 
 Swift provides three primary collection types, known as arrays, sets, and dictionaries, for storing collections of values. Arrays are ordered collections of values. Sets are unordered collections of unique values. Dictionaries are unordered collections of key-value associations.
</string>
			<key>ModifiedRange</key>
			<string>{786, 296}</string>
			<key>OriginalContent</key>
			<string> - - - - - - -
</string>
			<key>OriginalRange</key>
			<string>{680, 15}</string>
		</dict>
		<dict>
			<key>ModifiedContent</key>
			<string> 
 
</string>
			<key>ModifiedRange</key>
			<string>{1268, 4}</string>
			<key>OriginalContent</key>
			<string> - Ranges
 
 ?
 - 
</string>
			<key>OriginalRange</key>
			<string>{881, 19}</string>
		</dict>
		<dict>
			<key>ModifiedContent</key>
			<string> - - - - -
</string>
			<key>ModifiedRange</key>
			<string>{1283, 11}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{911, 0}</string>
		</dict>
		<dict>
			<key>ModifiedContent</key>
			<string> (this is mutable)</string>
			<key>ModifiedRange</key>
			<string>{1436, 18}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{1053, 0}</string>
		</dict>
		<dict>
			<key>ModifiedContent</key>
			<string> //(in xCode, press Option+click the variable name to see its type)</string>
			<key>ModifiedRange</key>
			<string>{1553, 67}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{1152, 0}</string>
		</dict>
		<dict>
			<key>ModifiedContent</key>
			<string>//sum = myDouble + myInt =&gt; This will NOT compile, since trying to add 2 variables of different type! (there is no implicit casting in Swift like we have in Python)
// Therefore, need to cast them manually:
</string>
			<key>ModifiedRange</key>
			<string>{1695, 207}</string>
			<key>OriginalContent</key>
			<string>//sum = myDouble + myInt =&gt; This will to compile, since trying to add 2 variables of different type! (there is no implicit casting)
// Therefore, need to cast them:
</string>
			<key>OriginalRange</key>
			<string>{1227, 165}</string>
		</dict>
		<dict>
			<key>ModifiedContent</key>
			<string>/*******************
 Playing with Arrays
 ******************/

var myArray:[String] = [] //Create an empty array of Strings
if myArray.isEmpty {
    print("Your array is empty")
} else {
    print ("Your array is not empty")
}
myArray = ["Pieter", "Coppens", "was", "here"]
</string>
			<key>ModifiedRange</key>
			<string>{2413, 275}</string>
			<key>OriginalContent</key>
			<string>//Playing with Arrays
var myArray = ["Pieter", "Coppens", "was", "here"]
</string>
			<key>OriginalRange</key>
			<string>{1903, 73}</string>
		</dict>
		<dict>
			<key>ModifiedContent</key>
			<string></string>
			<key>ModifiedRange</key>
			<string>{2704, 0}</string>
			<key>OriginalContent</key>
			<string>
</string>
			<key>OriginalRange</key>
			<string>{1992, 1}</string>
		</dict>
		<dict>
			<key>ModifiedContent</key>
			<string>print ("Number of elements in the Array:  \(myArray.count)") // Number of elements in the Array
myArray.append("!"); print (myArray)
print ("Checking if there is an element 'was': \(myArray.contains("was"))")
</string>
			<key>ModifiedRange</key>
			<string>{2744, 209}</string>
			<key>OriginalContent</key>
			<string>print (myArray.count) // Number of elements in the Array
myArray.append("!")
print (myArray.contains("was")) //See if there is an element "was"
</string>
			<key>OriginalRange</key>
			<string>{2033, 144}</string>
		</dict>
		<dict>
			<key>ModifiedContent</key>
			<string>print ("Substituted the first 2 elements of the array: \(myArray)")
    
/*************************
 Playing with dictionaries 
 ************************/

var myDaysDict = ["mon": 1,
                  "tue": 2,
                  "wed": 3,
                  "thu": 4,
                  "fri": 5
]
print ("This is the dict: \(myDaysDict)")
print ("Get an existing key (mon) from a dict: \(myDaysDict["mon"])")
print ("Get an non-existing key from a dict: \(myDaysDict["keydoesnotexist"])") // Unlike Python, this will not raise an exception. It will return nil, as the key does not exist (optionals)
print ("Number of items in the dict \(myDaysDict.count)")
for (k,v) in myDaysDict{
    print ("\(k) - number: \(v)")
}

// Getting key/values from a dict - without being certain it exists

if (myDaysDict["mon"] != nil) { //By default, getting a non-existing key will return nil as value.
    print ("The key 'mon' exists, its value is \(myDaysDict["mon"])")
}
else {
    print ("There is no such key in the dict")
}

// let doesNotExist = myDaysDict["doesnotexist"]! // mind the exclamation mark, it will result in throwing an exception rather than returning nil in case the key does not exist.

/***********************************************
 Flow control: if/then/else ; switch-case; loops
 ***********************************************/

//Switch statement
let n = 2
switch n {
case 1:
    print("It's 1!")
case 2...4:
    print("It's between 2 and 4!")
case 5, 6:
    print("It's 5 or 6")
default:
    print("Its another number!")
}

//If ... else if ... else
let speed = 28
if speed &lt;= 0 {
    print("Stationary")
} else if speed &lt;= 30 {
    print("Safe speed")
} else {
    print("Too fast!")
}

//For loop
for i in 1...5{
    print ("For loop, loop number \(i)")
}

//While loop
var count = 1
while count &lt; 3 {
    print("While loop - count is \(count)")
    count+=1
}
    

/** Functions
 *    - how to pass parameters by value / by reference
 *    - optional arguments / default values
 *     https://docs.swift.org/swift-book/GuidedTour/GuidedTour.html
 */

func addThese(x: Int, y: Int) -&gt; Int { // -&gt; Int specified the datatype it returns. Unlike C/Java, this is put at the end
    return (x+y);
}

func nothingToReturnNoArgs(){
    print("nothingToReturn was called")
}
print ("Calling addThese function with values 2 &amp; 3: \(addThese(x: 2, y:3))")
nothingToReturnNoArgs()

//Take an array as input, return multiple values (as a tuple)
func minMax(myarray: [Int])-&gt; (min:Int, max: Int){
    var currentMin = myarray[0]
    var currentMax = myarray[0]
    for value in myarray[1..&lt;myarray.count] {
        if value &lt; currentMin {
            currentMin = value
        } else if value &gt; currentMax {
            currentMax = value
        }
    }
    return (currentMin, currentMax)
    
}
print (minMax(myarray:[1,3,7,10,2])) // Looks like by default you ALWAYS need to name the arguments when calling a method. Can change this by adding a _ in front of the parameter in the function's signature

// Default parameters
func someFunction(parameterWithoutDefault: Int, parameterWithDefault: Int = 12) -&gt; (Int, Int) {
    // If you omit the second argument when calling this function, then
    // the value of parameterWithDefault is 12 inside the function body.
    return ((parameterWithoutDefault, parameterWithDefault))
}

print ("Function with default value for a parameter, overwrite default: \(someFunction(parameterWithoutDefault: 3, parameterWithDefault: 6))") // parameterWithDefault is 6

print ("Function with default value for a parameter, overwrite default: \(someFunction(parameterWithoutDefault: 3))") // parameterWithDefault is 12

/* Function parameters: by reference / by value  
 
 By default, all parameters in a function are immmutable (constants), updating them in a function will raise an error at compile-time keyword: by value;by reference*/

func someFunction(param1: Int, param2: Int=12) -&gt; (Int) {
    //param1+=1 // This will fail to compile!! as imput parameters are immutable by default
    return (param1 + param2)
}

/*If you want a function to modify a parameter’s value, and you want those changes to persist after the function call has ended, define that parameter as an in-out parameter instead.
You write an in-out parameter by placing the inout keyword right before a parameter’s type. An in-out parameter has a value that’s passed in to the function, is modified by the function, and is passed back out of the function to replace the original value - For example.*/

func swapTwoInts(_ a: inout Int, _ b: inout Int) { //note, the _ is there to indicate the parameter us not labeled
    let temporaryA = a
    a = b
    b = temporaryA
}

var a = 2
var b = 3
print ("Passing an value by referece (pointer): Before swapInts: a=\(a), b=\(b)")
swapTwoInts(&amp;a,&amp;b)
print ("Passing an value by referece (pointer): After swapInts : a=\(a), b=\(b)")

/************************** Classes &amp; Structures ***********************
 https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html
 - structures are value types
 - classes are reference types
 */


struct Resolution {
    var width = 1920
    var height = 1080
}
var myRes = Resolution()
print ("Structs: Resolution.width \(myRes.width), Resolution.height \(myRes.height)")
myRes.width=2048
print ("Structs: Resolution.width (updated) \(myRes.width), Resolution.height \(myRes.height)")

//Classes
    //https://www.programiz.com/swift-programming/classes-objects
class Mens{
    var species = "Tweepotigen" // Unlike Python, this will be an instance variable
}

class Person{
    var firstName: String
    var lastName: String
    var birthYear: Int
    init(firstName: String, lastName: String, birthYear: Int){ //Constructor
        self.firstName = firstName
        self.lastName = lastName
        self.birthYear = birthYear
    }
    
    func introduce(){ //Method
        print ("Hello, I am \(self.firstName) \(self.lastName), an instance of a Person - born in \(self.birthYear)")
    }
}
var me = Person(firstName: "Polle", lastName: "Pap", birthYear: 1969)
me.introduce()
var you = Person(firstName: "Piet", lastName: "Konijn", birthYear: 2016)
you.introduce()
you.firstName = "Jan"
you.introduce()
me.introduce()

var youToo = you
youToo.introduce()
youToo.firstName = "Classes are reference types you see?"
youToo.lastName = "YouToo = you =&gt; changing a property onb you will change youToo as well, since pointing so same memory"
youToo.introduce()
you.introduce()

/* Inheritance */


/* Exceptions / exception handling (try, except ExcX, ExcY , ) Custom Exceptions ... */
// https://www.programiz.com/swift-programming/error-handling

/*Introspection*/
</string>
			<key>ModifiedRange</key>
			<string>{3070, 6680}</string>
			<key>OriginalContent</key>
			<string>print (myArray)







</string>
			<key>OriginalRange</key>
			<string>{2294, 23}</string>
		</dict>
	</array>
	<key>File</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/My Playground.playgroundpage/main.swift</string>
</dict>
</plist>
